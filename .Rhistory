library(stringr)
library(lubridate)
devtools::install_github("MDShuey/newsanchor")
library(newsanchor)
library(rlist)
install.packages('devtools')
devtools::install_github("MDShuey/newsanchor")
library(rlist)
library(newsanchor)
pol_c <- c("Biden","Buttigieg","Sanders","Warren", "Klobuchar", "Bloomberg","Steyer", "Yang", "Bennet", "Sestak")
countcapture <- function(day_ = Sys.Date() - days(1), account_type = "developer") {
output <- lapply(pol_c, function(pol) {
polpull <- get_everything(qInTitle = pol,
from = day_, to = day_,
language = "en", sort_by = "popularity")
if (polpull$metadata$status_code != 200) {stop(paste("Error:", polpull$metadata$status_code, "during candidate:", pol))}
if (account_type != "developer"){
if (polpull$metadata$total_results > 100) {
times <- ceiling((polpull$metadata$total_results)/100)
for (i in 2:length(times)){
polpull <- list.rbind(polpull, get_everything(qInTitle = pol,
from = day_, to = day_,
language = "en", sort_by = "popularity",
page = i)
)
}
}
}
polpull
}
)
#finalizing output
names(output) <- pol_c
output
}
library(stringr)
library(lubridate)
library(newsanchor)
getwd)
getwd()
#list of candidates and their names.
# Having names don't occur often but I'm not sure if the keyword function checks article body too.
setwd('C:/Users/mds-nuc/Documents/GitHub/Portfolio/countcapture')
#list of candidates and their names.
# Having names don't occur often but I'm not sure if the keyword function checks article body too.
setwd('C:/Users/mds-nuc/Documents/GitHub/Portfolio/Part 1- Media Monitoring/countcapture')
library(stringr)
library(lubridate)
devtools::install_github("MDShuey/newsanchor")
library(newsanchor)
library(rlist)
#list of candidates and their names.
# Having names don't occur often but I'm not sure if the keyword function checks article body too.
setwd('C:/Users/mds-nuc/Documents/GitHub/Portfolio/Part 1- Media Monitoring/countcapture')
pol_c <- c("Biden","Buttigieg","Sanders","Warren", "Klobuchar", "Bloomberg","Steyer", "Yang", "Bennet", "Sestak")
countcapture <- function(day_ = Sys.Date() - days(1), account_type = "developer") {
output <- lapply(pol_c, function(pol) {
polpull <- get_everything(qInTitle = pol,
from = day_, to = day_,
language = "en", sort_by = "popularity")
if (polpull$metadata$status_code != 200) {stop(paste("Error:", polpull$metadata$status_code, "during candidate:", pol))}
if (account_type != "developer"){
if (polpull$metadata$total_results > 100) {
times <- ceiling((polpull$metadata$total_results)/100)
for (i in 2:length(times)){
polpull <- list.rbind(polpull, get_everything(qInTitle = pol,
from = day_, to = day_,
language = "en", sort_by = "popularity",
page = i)
)
}
}
}
polpull
}
)
#finalizing output
names(output) <- pol_c
output
}
#MARCH
marchget <- function()lastday{
#MARCH
marchget <- function(){
lastday <- Sys.Date() - days(1)
for (i in lastday:5) {
capture <- countcapture(day_ = paste0("2020-03-", i))
febmerge <- lapply(capture, function(pol) {
Map(c, febmerge[[pol]], capture[[pol]])
})
}
}
march <- marchget()
set_api_key("bc55ce30df4148a1ac5858d424f249bb")
march <- marchget()
